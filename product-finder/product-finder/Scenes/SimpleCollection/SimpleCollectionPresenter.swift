//
//  SimpleCollectionPresenter.swift
//  product-finder
//
//  Created Alejandro isai Acosta Martinez on 12/04/22.
//  Copyright © 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  The presenter is the only layer that communicates with the view 
//  (The rest of layers communicates with the presenter). Basically, 
//  it’s the layer responsible for making decisions based on the 
//  user’s actions sent by The View.
//
//  This file was generated by the IsaiinDev's iOS Templates so
//  you can apply clean architecture to your iOS projects.
//

import Foundation

protocol SimpleCollectionPresentationLogic {
    func searchProducts(query: String)
    func save(favorite product: SimpleCollection.SearchProducts.Product)
    func deleteFavorite(by id: String)
    func fetchFavorites()
}

class SimpleCollectionPresenter: Presenter, SimpleCollectionPresentationLogic {
    // MARK: - Properties

    lazy var view: SimpleCollectionDisplayLogic = {
        return self._view as! SimpleCollectionDisplayLogic
    }()

    lazy var interactor: SimpleCollectionBusinessLogic = {
        return self._interactor as! SimpleCollectionBusinessLogic
    }()

    lazy var router: SimpleCollectionRoutingLogic = {
        return self._router as! SimpleCollectionRoutingLogic
    }()

    // MARK: - PresentationLogic implementation

    func searchProducts(query: String) {
        let request = SimpleCollection.SearchProducts.Request(
            query: query)
        interactor.searchProducts(request: request)
    }
    
    func save(favorite product: SimpleCollection.SearchProducts.Product) {
        interactor.save(favorite: product)
    }
    
    func fetchFavorites() {
        interactor.getFavorites()
    }
    
    func deleteFavorite(by id: String) {
        interactor.deleteFavorite(by: id)
    }
}

extension SimpleCollectionPresenter: SimpleCollectionBusinessLogicDelegate {
    func present(products: SimpleCollection.SearchProducts.Response) {
        view.display(products: products.results)
    }
    
    func present(favoriteSaved: Bool) {
        view.display(favoriteSaved: favoriteSaved)
    }
    
    func present(favorites: [SimpleCollection.SearchProducts.Product]) {
        view.display(favorites: favorites)
    }
    
    func present(favoriteDeletionResult: Bool) {
        view.display(favoriteDeleted: favoriteDeletionResult)
    }
    
    func present(failure message: String) {
        view.display(error: message)
    }
}
