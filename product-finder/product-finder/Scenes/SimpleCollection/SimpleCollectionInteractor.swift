//
//  SimpleCollectionInteractor.swift
//  product-finder
//
//  Created Alejandro isai Acosta Martinez on 12/04/22.
//  Copyright Â© 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  The interactor is responsible for managing data from the model layer 
//  (note that Model is not part of the VIPER architecture, feel free to 
//  implement it or not, but for sure it will make our app more concise).
//
//  This file was generated by the IsaiinDev's iOS Templates so
//  you can apply clean architecture to your iOS projects.
//

import Foundation

protocol SimpleCollectionBusinessLogic {
    func searchProducts(request: SimpleCollection.SearchProducts.Request)
    func getFavorites()
    func save(favorite product: SimpleCollection.SearchProducts.Product)
    func deleteFavorite(by id: String)
}

// MARK: - Back comunication to Presenter
protocol SimpleCollectionBusinessLogicDelegate: InteractorToPresenter {
    func present(products: SimpleCollection.SearchProducts.Response)
    func present(favoriteSaved: Bool)
    func present(favorites: [SimpleCollection.SearchProducts.Product])
    func present(favoriteDeletionResult: Bool)
    func present(failure message: String)
}

class SimpleCollectionInteractor: Interactor, SimpleCollectionBusinessLogic {
    // MARK: - Properties

    lazy var presenter: SimpleCollectionBusinessLogicDelegate = {
		return self._toPresenter as! SimpleCollectionBusinessLogicDelegate
	}()

    let worker = SimpleCollectionWorker()

    // MARK: - BussinesLogic Implementation
    
    func searchProducts(request: SimpleCollection.SearchProducts.Request) {
        worker.searchProducts(request: request) { result in
            switch result {
            case .success(let response):
                guard !response.results.isEmpty else {
                    return
                }
                self.presenter.present(products: response)
            case .failure(let error):
                self.presenter.present(failure: error.localizedDescription)
            }
        }
    }
    
    func save(favorite product: SimpleCollection.SearchProducts.Product) {
        worker.save(favorite: product) { saved in
            self.presenter.present(favoriteSaved: saved)
        }
    }
    
    func getFavorites() {
        worker.getFavorites { favorites in
            self.presenter.present(favorites: favorites)
        }
    }
    
    func deleteFavorite(by id: String) {
        worker.deleteFavorite(by: id) { deleted in
            self.presenter.present(favoriteDeletionResult: deleted)
        }
    }
}
