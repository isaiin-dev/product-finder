//
//  SimpleCollectionInteractor.swift
//  product-finder
//
//  Created Alejandro isai Acosta Martinez on 12/04/22.
//  Copyright Â© 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  The interactor is responsible for managing data from the model layer 
//  (note that Model is not part of the VIPER architecture, feel free to 
//  implement it or not, but for sure it will make our app more concise).
//
//  This file was generated by the IsaiinDev's iOS Templates so
//  you can apply clean architecture to your iOS projects.
//

import Foundation

protocol SimpleCollectionBusinessLogic {
    func requestSomething(request: SimpleCollection.SomeUseCase.Request)
}

// MARK: - Back comunication to Presenter
protocol SimpleCollectionBusinessLogicDelegate: InteractorToPresenter {
    func presentSuccess(response: SimpleCollection.SomeUseCase.Response)
    func presentFailure()
}

class SimpleCollectionInteractor: Interactor, SimpleCollectionBusinessLogic {
    // MARK: - Properties

    lazy var presenter: SimpleCollectionBusinessLogicDelegate = {
		return self._toPresenter as! SimpleCollectionBusinessLogicDelegate
	}()

    let worker = SimpleCollectionWorker()

    // MARK: - BussinesLogic Implementation

    func requestSomething(request: SimpleCollection.SomeUseCase.Request) {
        let response = worker.doSomeWork()

        if response {
            self.presenter.presentSuccess(response: SimpleCollection.SomeUseCase.Response())
        } else {
            self.presenter.presentFailure()
        }
    }
}
