//
//  SimpleCollectionView.swift
//  product-finder
//
//  Created Alejandro isai Acosta Martinez on 12/04/22.
//  Copyright © 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This layer contains the UI logic (display, update, animate…) and 
//  responsible for intercepting the user’s action and send it to the 
//  presenter. Most importantly, it has no business logic.
//
//  This file was generated by the IsaiinDev's iOS Templates so
//  you can apply clean architecture to your iOS projects.
//

import UIKit
import Lottie

enum SimpleCollectionViewStyle {
    case Search, Favorites, LastResults
}

protocol SimpleCollectionDisplayLogic: View {
    func display(products: [SimpleCollection.SearchProducts.Product])
    func display(favoriteSaved: Bool)
    func display(favorites: [SimpleCollection.SearchProducts.Product])
    func display(favoriteDeleted: Bool)
    func display(error: String)
}

class SimpleCollectionViewController: UIViewController {
	// MARK: - Properties
	
	lazy var presenter: SimpleCollectionPresentationLogic = {
		return self._presenter as! SimpleCollectionPresentationLogic
	}()
    
    var style: SimpleCollectionViewStyle = .Search
    var searchQuery = ""
    var products = [SimpleCollection.SearchProducts.Product]() {
        didSet {
            DispatchQueue.main.async {
                self.toggleState()
                self.table.reloadData()
                if self.products.isEmpty {
                    self.navigationItem.rightBarButtonItem?.isEnabled = false
                    self.navigationController?.navigationBar.topItem?.title = Constants.Content.SimpleCollectionView.Search.title
                } else {
                    if self.style == .Search {
                        self.navigationItem.rightBarButtonItem?.isEnabled = true
                        self.navigationController?.navigationBar.topItem?.title = self.searchQuery
                    }
                }
            }
        }
    }
    
    // MARK: - SubViews
    
    private lazy var searchController: UISearchController = {
        let searchResultsController = SearchKeyWordsResultViewController()
        searchResultsController.delegate = self
        var controller = UISearchController(searchResultsController: searchResultsController)
        controller.searchBar.tintColor = UIColor.white
        controller.searchBar.searchTextField.backgroundColor = .kobi.withAlphaComponent(0.5)
        controller.searchBar.searchTextField.attributedPlaceholder = Constants.Content.SimpleCollectionView.Search.placeHolder
        controller.searchResultsUpdater = self
        controller.searchBar.delegate = self
        return controller
    }()
    
    private lazy var table: UITableView = {
        var table = UITableView()
        table.translatesAutoresizingMaskIntoConstraints = false
        table.showsVerticalScrollIndicator = false
        table.backgroundColor = .clear
        table.register(ItemResultCell.self, forCellReuseIdentifier: "ITEM_RESULT_CELL")
        table.delegate = self
        table.dataSource = self
        table.separatorStyle = .singleLine
        return table
    }()
    
    private var emptyStateImage: AnimationView = {
        let image = AnimationView(name: "empty-box")
        image.translatesAutoresizingMaskIntoConstraints = false
        image.loopMode = .loop
        return image
    }()

	// MARK: - Object Lifecycle

	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}
  
	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		setup()
	}	

	// MARK: - View Lifecycle

	override func viewDidLoad() {
		super.viewDidLoad()
		self.setupView()
	}
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        switch style {
        case .Favorites:
            self.presenter.fetchFavorites()
        case .Search:
            if UDManager.shared.getValue(for: .firstLaunch, ofType: Bool.self) == nil {
                self.showInfoAlert(
                    data: Constants.Content.SimpleCollectionView.Alert.firstLauch,
                    delegate: self)
                UDManager.shared.set(value: true, for: .firstLaunch)
            }
        case .LastResults:
            if let lastSearchItems = UDManager.shared.getObjet(for: .lastSearchItems, ofType: [SimpleCollection.SearchProducts.Product].self) {
                self.products = lastSearchItems
            }
        }
        
        emptyStateImage.play()
    }

	// MARK: - Setup

	private func setup() {
		self.setup(
			presenter: SimpleCollectionPresenter(),
			interactor: SimpleCollectionInteractor(),
			router: SimpleCollectionRouter()
		)
	}

	private func setupView() {
        view.backgroundColor = .white
        if style == .Search {
            navigationItem.searchController = searchController
            let clear = UIBarButtonItem(barButtonSystemItem: .trash, target: self, action: #selector(clear))
            navigationItem.rightBarButtonItem = clear
            navigationItem.rightBarButtonItem?.isEnabled = false
        }
        view.addSubview(table)
        view.addSubview(emptyStateImage)
        setupConstraints()
        toggleState()
	}

	private func setupConstraints() {
		NSLayoutConstraint.activate([
            emptyStateImage.widthAnchor.constraint(equalTo: view.safeAreaLayoutGuide.widthAnchor, multiplier: 0.5),
            emptyStateImage.heightAnchor.constraint(equalTo: view.safeAreaLayoutGuide.widthAnchor, multiplier: 0.5),
            emptyStateImage.centerXAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerXAnchor),
            emptyStateImage.centerYAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerYAnchor),
            table.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),
            table.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            table.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),
            table.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)
        ])
	}
    
    private func toggleState() {
        if products.isEmpty {
            emptyStateImage.isHidden = false
            table.isHidden = true
        } else {
            emptyStateImage.isHidden = true
            table.isHidden = false
        }
    }

	// MARK: - Actions
    
    @objc func clear() {
        self.products = [SimpleCollection.SearchProducts.Product]()
    }
}

extension SimpleCollectionViewController: SimpleCollectionDisplayLogic {
    func display(products: [SimpleCollection.SearchProducts.Product]) {
        DispatchQueue.main.async {
            var updatedResults = products
            
            let favorites = FavoritesCoreDataManager.shared.getFavorites()
            
            favorites.forEach { fav in
                for (index, item) in updatedResults.enumerated() {
                    if item.id == fav.id {
                        updatedResults[index].isFavorite = true
                    }
                }
            }
            
            self.products = updatedResults
            
            _ = UDManager.shared.save(object: products, for: .lastSearchItems)
            
            self.emptyStateImage.animation = Animation.named("empty-box")
            self.emptyStateImage.play()
        }
    }
    
    func display(favorites: [SimpleCollection.SearchProducts.Product]) {
        self.products = favorites
    }
    
    func display(favoriteSaved: Bool) {
        if favoriteSaved {
            showInfoAlert(data: Constants.Content.SimpleCollectionView.Alert.favoriteSaved, delegate: self)
        } else {
            showInfoAlert(data: Constants.Content.SimpleCollectionView.Alert.favoriteNotSaved, delegate: self)
        }
    }
    
    func display(favoriteDeleted: Bool) {
        if favoriteDeleted {
            showInfoAlert(data: Constants.Content.SimpleCollectionView.Alert.favoriteDeleted, delegate: self)
            self.presenter.fetchFavorites()
        } else {
            showInfoAlert(data: Constants.Content.SimpleCollectionView.Alert.favoriteNotDeleted, delegate: self)
        }
    }
    
    func display(error: String) {
        Log.toConsole(type: .e, tag: "Error", error)
    }
}

// MARK: - TableView delegate & dataSource

extension SimpleCollectionViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        products.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "ITEM_RESULT_CELL", for: indexPath) as! ItemResultCell
        cell.product = self.products[indexPath.row]
        cell.setSelectedBackground(color: .lightText)
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        Constants.Design.Sizing.Cell.cellHeight
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.presenter.goToDetail(of: self.products[indexPath.row])
    }
    
    func tableView(_ tableView: UITableView, leadingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        if self.style != .Favorites {
            let action = UIContextualAction(style: .normal, title: "Favorite") { action, view, completionHandler in
                let product = self.products[indexPath.row]
                
                if product.isFavorite ?? false {
                    self.showInfoAlert(
                        data: Constants.Content.SimpleCollectionView.Alert.alreadyFavorite,
                        delegate: self)
                    completionHandler(true)
                } else {
                    self.presenter.save(favorite: self.products[indexPath.row])
                    completionHandler(true)
                }
            }
            action.backgroundColor = .kobi
            return UISwipeActionsConfiguration(actions: [action])
        } else {
            return nil
        }
    }
    
    func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        if self.style == .Favorites {
            let action = UIContextualAction(style: .destructive, title: "Delete") { action, view, completionHandler in
                self.presenter.deleteFavorite(by: self.products[indexPath.row].id)
                completionHandler(true)
            }
            action.backgroundColor = .systemRed
            return UISwipeActionsConfiguration(actions: [action])
        } else {
            return nil
        }
    }
}

// MARK: - SearchBar delegate♥
extension SimpleCollectionViewController: UISearchBarDelegate {
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        guard let textToSearch = searchBar.text else { return }
        searchController.isActive = false
        presenter.searchProducts(query: textToSearch)
        searchQuery = textToSearch
        
        DispatchQueue.main.async {
            self.emptyStateImage.animation = Animation.named("searching")
            self.emptyStateImage.play()
        }
    }
}

// MARK: - SearchKerWordsResultViewControllerDelegate

extension SimpleCollectionViewController: SearchKeyWordsResultViewControllerDelegate {
    func didSelect(keyword: String) {
        searchController.isActive = false
        presenter.searchProducts(query: keyword)
        searchQuery = keyword
        
        DispatchQueue.main.async {
            self.emptyStateImage.animation = Animation.named("searching")
            self.emptyStateImage.play()
        }
    }
}

// MARK: - SerachResultUpdater

extension SimpleCollectionViewController: UISearchResultsUpdating {
    func updateSearchResults(for searchController: UISearchController) {
        guard
            let searchText = searchController.searchBar.text,
            let controller = searchController.searchResultsController as? SearchKeyWordsResultViewController
        else {
            return
        }
        
        controller.query = searchText
    }
}

// MARK: - BottomSheetDelegate

extension SimpleCollectionViewController: BottomSeheetDelegate {
    func didTap(action: BottomSheetAction, bottomSheet: BottomSheet) {
        switch action {
        case .leading:
            bottomSheet.hide()
        case .trailing:
            bottomSheet.hide()
        case .simpleOk:
            bottomSheet.hide()
        case .toast:
            bottomSheet.hide()
        }
    }
}
