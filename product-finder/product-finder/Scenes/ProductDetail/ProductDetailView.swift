//
//  ProductDetailView.swift
//  product-finder
//
//  Created Isaiin Dev on 16/04/22.
//  Copyright Â© 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This layer contains the UI logic (display, update, animateâ€¦) and 
//  responsible for intercepting the userâ€™s action and send it to the 
//  presenter. Most importantly, it has no business logic.
//
//  This file was generated by the IsaiinDev's iOS Templates so
//  you can apply clean architecture to your iOS projects.
//

import UIKit
import ShimmerSwift

protocol ProductDetailDisplayLogic: View {
	func displaySomething(viewModel: ProductDetail.SomeUseCase.ViewModel)
}

class ProductDetailViewController: UIViewController {
	// MARK: - Properties
	
	lazy var presenter: ProductDetailPresentationLogic = {
		return self._presenter as! ProductDetailPresentationLogic
	}()
    
    var product: SimpleCollection.SearchProducts.Product?
    
    override var hidesBottomBarWhenPushed: Bool {
        get {
            return true
        }
        set {
            super.hidesBottomBarWhenPushed = newValue
        }
    }
    
    // MARK: - Subviews
    
    private var titleLabel: UILabel = {
        var label = UILabel()
        label.textColor = .gray
        label.font = Constants.Design.Font.systemBold16
        label.numberOfLines = 0
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private var image: UIImageView = {
        var image = UIImageView()
        image.backgroundColor = #colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1)
        image.layer.cornerRadius = 4
        image.contentMode = .scaleAspectFit
        image.clipsToBounds = true
        image.translatesAutoresizingMaskIntoConstraints = false
        return image
    }()
    
    private lazy var shimmeringView: ShimmeringView = {
        var shimmerView = ShimmeringView()
        shimmerView.contentView = self.image
        shimmerView.translatesAutoresizingMaskIntoConstraints = false
        return shimmerView
    }()
    
    private var price: UILabel = {
        var label = UILabel()
        label.textColor = .darkGray
        label.font = Constants.Design.Font.systemBold34
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private var installsOrTag: UILabel = {
        var label = UILabel()
        label.textColor = .lightGray
        label.font = Constants.Design.Font.systemBold16
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private var shippingInfo: UILabel = {
        var label = UILabel()
        label.textColor = .lightGreen
        label.font = Constants.Design.Font.systemBold16
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private var attributesLabel: UILabel = {
        let label = UILabel()
        label.textColor = .darkGray
        label.font = Constants.Design.Font.systemBold34
        label.text = Constants.Content.ProductDetail.attributes
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private var attributesStack: UIStackView = {
        let stack = UIStackView()
        stack.axis = .vertical
        stack.distribution = .fillEqually
        stack.translatesAutoresizingMaskIntoConstraints = false
        return stack
    }()
    
    lazy var bigButton: UIView = {
        var configuration = UIButton.Configuration.filled()
        configuration.title = Constants.Content.ProductDetail.CTA
        configuration.cornerStyle = .large
        configuration.baseForegroundColor = .white
        configuration.baseBackgroundColor = .kobi
        let button = UIButton(configuration: configuration)
        button.addAction(UIAction { _ in
            guard let url = URL(string: self.product?.permalink ?? "") else { return }
            UIApplication.shared.open(url)
        }, for: .touchUpInside)
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    private var attributesStackCalculatedHeight: CGFloat = 0.0
    private var contentViewCalculatedHeight: CGFloat = 0.0
    
    private lazy var contentView: UIView = {
        let view = UIView()
        if let product = product {
            titleLabel.text = product.title
            view.addSubview(titleLabel)
            view.addSubview(shimmeringView)
            if
                let imageURL = URL(string: product.thumbnail) {
                image.load(url: imageURL, id: "\(product.id)", shimmeringView: shimmeringView)
            }
            
            price.text = product.price.asCurrency()
            view.addSubview(price)
            
            if let installments = product.installments {
                if installments.rate == 0{
                    installsOrTag.attributedText = installments.getAttributtedDescription()
                } else {
                    installsOrTag.text = installments.getDescription()
                }
            } else {
                installsOrTag.text = "TAG"
            }
            view.addSubview(installsOrTag)
            
            shippingInfo.text = "\(product.isFavorite ?? false ? "ðŸ’œ - ":"")\(product.shipping.freeShipping ? Constants.Content.ProductDetail.freeShipping : "")\(product.shipping.logisticType == "fulfillment" ? Constants.Content.ProductDetail.full : "")"
            view.addSubview(shippingInfo)
            
            view.addSubview(attributesLabel)
            
            attributesStackCalculatedHeight = CGFloat(product.attributes.count * 55)
            contentViewCalculatedHeight = attributesStackCalculatedHeight + (self.view.bounds.size.height * 0.8)
            
            product.attributes.forEach { attribute in
                attributesStack.addArrangedSubview(viewFor(attrubite: attribute))
            }
            
            view.addSubview(attributesStack)
            view.addSubview(bigButton)
        }
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    lazy var scrollView: UIScrollView = {
        let scrollView = UIScrollView()
        scrollView.addSubview(contentView)
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        return scrollView
    }()

	// MARK: - Object Lifecycle

	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}
  
	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		setup()
	}	

	// MARK: - View Lifecycle

	override func viewDidLoad() {
		super.viewDidLoad()
		self.setupView()
	}
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        self.navigationController?.navigationBar.prefersLargeTitles = true
    }

	// MARK: - Setup

	private func setup() {
		self.setup(
			presenter: ProductDetailPresenter(),
			interactor: ProductDetailInteractor(),
			router: ProductDetailRouter()
		)
	}

	private func setupView() {
        view.backgroundColor = .white
        self.navigationController?.navigationBar.prefersLargeTitles = false
        self.title = Constants.Content.ProductDetail.title
        view.addSubview(scrollView)
        setupConstraints()
	}

	private func setupConstraints() {
        let safeArea    = view.safeAreaLayoutGuide
        let layoutGuide = contentView.safeAreaLayoutGuide
        
		NSLayoutConstraint.activate([
            // scrollView constraints
            scrollView.leadingAnchor.constraint(equalTo: safeArea.leadingAnchor),
            scrollView.topAnchor.constraint(equalTo: safeArea.topAnchor),
            scrollView.trailingAnchor.constraint(equalTo: safeArea.trailingAnchor),
            scrollView.bottomAnchor.constraint(equalTo: safeArea.bottomAnchor),
            // contentView constraints
            contentView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            contentView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            contentView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            contentView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            contentView.widthAnchor.constraint(equalTo: scrollView.widthAnchor),
            contentView.heightAnchor.constraint(equalToConstant: contentViewCalculatedHeight),
            // titleLabel constraints
            titleLabel.leadingAnchor.constraint(equalTo: layoutGuide.leadingAnchor, constant: Constants.Design.Spacing.higest),
            titleLabel.topAnchor.constraint(equalTo: layoutGuide.topAnchor, constant: Constants.Design.Spacing.higest),
            titleLabel.trailingAnchor.constraint(equalTo: layoutGuide.trailingAnchor, constant: Constants.Design.Spacing.higest.negative()),
            titleLabel.heightAnchor.constraint(equalToConstant: 60.0),
            // shimmeringView constraints
            shimmeringView.leadingAnchor.constraint(equalTo: layoutGuide.leadingAnchor, constant: Constants.Design.Spacing.higest),
            shimmeringView.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: Constants.Design.Spacing.higest),
            shimmeringView.trailingAnchor.constraint(equalTo: layoutGuide.trailingAnchor, constant: Constants.Design.Spacing.higest.negative()),
            shimmeringView.heightAnchor.constraint(equalTo: safeArea.heightAnchor, multiplier: 0.4),
            // price constraints
            price.leadingAnchor.constraint(equalTo: layoutGuide.leadingAnchor, constant: Constants.Design.Spacing.higest),
            price.topAnchor.constraint(equalTo: shimmeringView.bottomAnchor, constant: Constants.Design.Spacing.higest),
            price.heightAnchor.constraint(equalToConstant: 60),
            price.trailingAnchor.constraint(equalTo: layoutGuide.trailingAnchor, constant: Constants.Design.Spacing.higest.negative()),
            // installsOrTag constraints
            installsOrTag.leadingAnchor.constraint(equalTo: layoutGuide.leadingAnchor, constant: Constants.Design.Spacing.higest),
            installsOrTag.topAnchor.constraint(equalTo: price.bottomAnchor),
            installsOrTag.heightAnchor.constraint(equalToConstant: 30),
            installsOrTag.trailingAnchor.constraint(equalTo: layoutGuide.trailingAnchor, constant: Constants.Design.Spacing.higest.negative()),
            // shippingInfo constraints
            shippingInfo.leadingAnchor.constraint(equalTo: layoutGuide.leadingAnchor, constant: Constants.Design.Spacing.higest),
            shippingInfo.topAnchor.constraint(equalTo: installsOrTag.bottomAnchor),
            shippingInfo.heightAnchor.constraint(equalToConstant: 30),
            shippingInfo.trailingAnchor.constraint(equalTo: layoutGuide.trailingAnchor, constant: Constants.Design.Spacing.higest.negative()),
            // attributesLabel constraints
            attributesLabel.leadingAnchor.constraint(equalTo: layoutGuide.leadingAnchor, constant: Constants.Design.Spacing.higest),
            attributesLabel.topAnchor.constraint(equalTo: shippingInfo.bottomAnchor, constant: Constants.Design.Spacing.higest),
            attributesLabel.heightAnchor.constraint(equalToConstant: 60),
            attributesLabel.trailingAnchor.constraint(equalTo: layoutGuide.trailingAnchor, constant: Constants.Design.Spacing.higest.negative()),
            // attributesStack constraints
            attributesStack.leadingAnchor.constraint(equalTo: layoutGuide.leadingAnchor, constant: Constants.Design.Spacing.higest),
            attributesStack.topAnchor.constraint(equalTo: attributesLabel.bottomAnchor, constant: Constants.Design.Spacing.higest),
            attributesStack.heightAnchor.constraint(equalToConstant: attributesStackCalculatedHeight),
            attributesStack.trailingAnchor.constraint(equalTo: layoutGuide.trailingAnchor, constant: Constants.Design.Spacing.higest.negative()),
            // bigButton constraints
            bigButton.leadingAnchor.constraint(equalTo: layoutGuide.leadingAnchor, constant: Constants.Design.Spacing.higest),
            bigButton.topAnchor.constraint(equalTo: attributesStack.bottomAnchor, constant: Constants.Design.Spacing.higest * 1.5),
            bigButton.heightAnchor.constraint(equalToConstant: 50),
            bigButton.trailingAnchor.constraint(equalTo: layoutGuide.trailingAnchor, constant: Constants.Design.Spacing.higest.negative())
        ])
	}

	// MARK: - Actions 
}

extension ProductDetailViewController: ProductDetailDisplayLogic {
	func displaySomething(viewModel: ProductDetail.SomeUseCase.ViewModel) {}
}

// MARK: - Helpers

extension ProductDetailViewController {
    func viewFor(attrubite: SimpleCollection.SearchProducts.Attribute) -> UIView {
        let view = AttributeView()
        view.attribute = attrubite
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }
}
