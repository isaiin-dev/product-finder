//
//  ProductDetailView.swift
//  product-finder
//
//  Created Isaiin Dev on 16/04/22.
//  Copyright © 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This layer contains the UI logic (display, update, animate…) and 
//  responsible for intercepting the user’s action and send it to the 
//  presenter. Most importantly, it has no business logic.
//
//  This file was generated by the IsaiinDev's iOS Templates so
//  you can apply clean architecture to your iOS projects.
//

import UIKit

protocol ProductDetailDisplayLogic: View {
	func displaySomething(viewModel: ProductDetail.SomeUseCase.ViewModel)
}

class ProductDetailViewController: UIViewController {
	// MARK: - Properties
	
	lazy var presenter: ProductDetailPresentationLogic = {
		return self._presenter as! ProductDetailPresentationLogic
	}()
    
    // MARK: - Sbviews
    
    lazy var iamge: UIImageView = {
        let imageView = UIImageView()
        imageView.contentMode = .scaleAspectFill
        imageView.translatesAutoresizingMaskIntoConstraints = false
        return imageView
    }()

	// MARK: - Object Lifecycle

	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}
  
	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		setup()
	}	

	// MARK: - View Lifecycle

	override func viewDidLoad() {
		super.viewDidLoad()
		self.setupView()
		// Example call to presenter
		self.presenter.doSomething(request: ProductDetail.SomeUseCase.Request())
	}

	// MARK: - Setup

	private func setup() {
		self.setup(
			presenter: ProductDetailPresenter(),
			interactor: ProductDetailInteractor(),
			router: ProductDetailRouter()
		)
	}

	private func setupView() {
		// Setup all view components here
	}

	private func setupConstraints() {
		NSLayoutConstraint.activate([
            // TODO: - Add your views constraints here
        ])
	}

	// MARK: - Actions 
}

extension ProductDetailViewController: ProductDetailDisplayLogic {
	func displaySomething(viewModel: ProductDetail.SomeUseCase.ViewModel) {}
}
